# This +Application Controller+ should be used to control the overall functionality of this application
# @author Ashley Childress
# @version 2.14.2014
class ApplicationController < ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
 	protect_from_forgery with: :exception
  
  # Pass strong parameters to +Ability+ for permission checking
  before_filter :apply_strong_parameters
  
	# Make all files defined under the +helpers+ section accessible by all application views
	helper :all
	
	# Make the methods listed accessible to both controllers and views
	helper_method :current_user, :redirect_back_or_to_default

  # Rescue any errors generated by a +user+ who attempts to access any page for which she is unauthorized to view in this application.
  # @pre an +AccessDenied+ error has been raised by +CanCan+
  # @post the user will be redirected to the application home page and a notification message will be displayed
  rescue_from CanCan::AccessDenied do |exception|
  	## The second string included below takes the calling class and transforms it from code to a pluralized, readable format.  For example, the InterestPointClass would be displayed as 'Interest Points'.
  	flash[:error] = "Sorry, you don't have access to #{exception.action} #{exception.subject.class.name.underscore.titleize.pluralize}.  Please contact your system administrator."
    redirect_to root_url
  end
  
  # Rescue any errors generated by a +user+ who attempts to load any record that does not exist in this application.
  # @pre a +RecordNotFound+ error has been raised
  # @post the user will be redirected to the application home page and a notification message will be displayed
	# rescue_from ActiveRecord::RecordNotFound do |exception|
	 	# flash[:error] = "Sorry, aliens have crash landed (so the record could not be found). Please try again."
		# redirect_to root_url
	# end
	
	# Rescue any errors generated by a +user+ who attempts to execute any action that does not exist in this application.
  # @pre a +NoMethodError+ error has been raised
  # @post the user will be redirected to the application home page and a notification message will be displayed
	# rescue_from NoMethodError do |exception|
	 	# flash[:error] = "Those pesky monkeys ran off with the application (which could also mean that method doesn't exist). Please try again."
	 	# redirect_to root_url
	# end
	
	# Rescue any errors generated by a +user+ who attempts to execute an action with the appropriate authenticity.
	# @note This error is commonly raised if the browser cookies are cleared during a valid +user session+.
  # @pre an +InvalidAuthenticityToken+ error has been raised
  # @post the user will be redirected to the application home page, a notification message will be displayed and the current ability is reset to preven unauthorized access.
	rescue_from ActionController::InvalidAuthenticityToken do
 		flash[:error] = "You have been logged out because your browser cookies were erased."
 		@current_ability = nil
 	  redirect_to root_url
  end
		
	private 
	# Get the +User+ who is currently logged in to this application instance
	# @return [User] current_user the +User+ logged in to this application instance or +nil+
	def current_user
		@current_user ||= session[:user_id] && User.find(session[:user_id])
	end
    
	# Store the URL of the requesting page which last required the +User+ to sign in.
	def store_location
		session[:return_to] = request.url
	end
  
	# Redirect and display the previous page or to the +default+ page given.
	def redirect_back_or_to_default(default)
		redirect_to(session[:return_to] || default)
		session[:return_to] = nil
	end
	
	# Apply strong_parameters filtering before CanCan authorization
	# See https://github.com/ryanb/cancan/issues/571#issuecomment-10753675
  def apply_strong_parameters
  	resource = controller_name.singularize.to_sym
	  method = "#{resource}_params"
	  params[resource] &&= send(method) if respond_to?(method, true)
  end
end
